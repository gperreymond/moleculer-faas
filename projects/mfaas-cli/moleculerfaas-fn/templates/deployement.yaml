apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: "{{ .Values.app.name }}"
    namespace: "{{ .Release.Namespace }}"
    env: "{{ .Values.env }}"
    revision: "{{ .Release.Revision }}"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.app.name }}"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  minReadySeconds: 3
  # 1 because revision are handled by Helm so we will not use directly Kubernetes to rollback
  # we could have set this field to 0 but at least we have another way to rollback if needed
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: "{{ .Values.app.name }}"
        namespace: "{{ .Release.Namespace }}"
    spec:
      affinity:
        podAntiAffinity:
          # Preferred is better than required: if the orchestrator want to autoscale more pods than
          # the number of nodes, you will be locked if you are using 'required' field on scheduling
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - {{ .Values.app.name }}
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
      containers:
      - name: "docker-{{ .Values.app.name }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        securityContext:
          privileged: true
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            port: 3000
            path: /hc
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            port: 3000
            path: /hc
          initialDelaySeconds: 3
          periodSeconds: 3
        ports:
          - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "{{ .Values.env }}"
        - name: APP_BROKER_METRICS
          value: "true"
        - name: APP_PORT
          value: "3000"
        - name: APP_MEMCACHED_HOST
          value: memcached.moleculerfaas.svc.cluster.local
        - name: APP_NATS_HOST
          value: nats-client.moleculerfaas.svc.cluster.local
        - name: APP_RABBITMQ_HOST
          value: rabbitmq.moleculerfaas.svc.cluster.local
